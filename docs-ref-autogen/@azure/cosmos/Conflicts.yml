### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Conflicts'
    name: Conflicts
    fullName: Conflicts
    children:
      - '@azure/cosmos.Conflicts.constructor'
      - '@azure/cosmos.Conflicts.container'
      - '@azure/cosmos.Conflicts.query'
      - '@azure/cosmos.Conflicts.readAll'
    langs:
      - typeScript
    type: class
    summary: Use to query or read all conflicts.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.constructor'
    name: Conflicts
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new Conflicts(container: Container, clientContext: ClientContext)'
      parameters:
        - id: container
          type:
            - '@azure/cosmos.Container'
          description: ''
        - id: clientContext
          type:
            - ClientContext
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.container'
    name: container
    fullName: container
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'container: Container'
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.query'
    name: query
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
      parameters:
        - id: query
          type:
            - '@azure/cosmos.SqlQuerySpec'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition>'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Conflicts.readAll'
    name: readAll
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function readAll(options?: FeedOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.FeedOptions'
          description: ''
          optional: true
      return:
        type:
          - '@azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition>'
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Container'
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.SqlQuerySpec'
    spec.typeScript:
      - name: SqlQuerySpec
        fullName: SqlQuerySpec
        uid: '@azure/cosmos.SqlQuerySpec'
  - uid: '@azure/cosmos.FeedOptions'
    spec.typeScript:
      - name: FeedOptions
        fullName: FeedOptions
        uid: '@azure/cosmos.FeedOptions'
  - uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ConflictDefinition>'
    spec.typeScript:
      - name: QueryIterator
        fullName: QueryIterator
        uid: '@azure/cosmos.QueryIterator'
      - name: <
        fullName: <
      - name: ConflictDefinition
        fullName: ConflictDefinition
        uid: '@azure/cosmos.ConflictDefinition'
      - name: '>'
        fullName: '>'
