### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Container'
    name: Container
    fullName: Container
    children:
      - '@azure/cosmos.Container.conflict'
      - '@azure/cosmos.Container.database'
      - '@azure/cosmos.Container.delete'
      - '@azure/cosmos.Container.extractPartitionKey'
      - '@azure/cosmos.Container.getPartitionKeyDefinition'
      - '@azure/cosmos.Container.id'
      - '@azure/cosmos.Container.item'
      - '@azure/cosmos.Container.items'
      - '@azure/cosmos.Container.read'
      - '@azure/cosmos.Container.replace'
      - '@azure/cosmos.Container.storedProcedure'
      - '@azure/cosmos.Container.storedProcedures'
      - '@azure/cosmos.Container.trigger'
      - '@azure/cosmos.Container.triggers'
      - '@azure/cosmos.Container.url'
      - '@azure/cosmos.Container.userDefinedFunction'
      - '@azure/cosmos.Container.userDefinedFunctions'
    langs:
      - typeScript
    type: class
    summary: >-
      Operations for reading, replacing, or deleting a specific, existing
      container by id.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.conflict'
    name: conflict
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to read, replace, or delete a specific, existing <xref:Conflict> by
      id.

      Use `.conflicts` for creating new conflicts, or querying/reading all
      conflicts.
    syntax:
      content: 'function conflict(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the <xref:Conflict>.
      return:
        type:
          - '@azure/cosmos.Conflict'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.database'
    name: database
    fullName: database
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'database: Database'
      return:
        type:
          - '@azure/cosmos.Database'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.delete'
    name: delete
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the container
    syntax:
      content: 'function delete(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.extractPartitionKey'
    name: extractPartitionKey
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function extractPartitionKey(document: any, partitionKeyDefinition:
        PartitionKeyDefinition)
      parameters:
        - id: document
          type:
            - any
          description: ''
        - id: partitionKeyDefinition
          type:
            - '@azure/cosmos.PartitionKeyDefinition'
          description: ''
      return:
        type:
          - '@azure/cosmos.PartitionKey[]'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.getPartitionKeyDefinition'
    name: getPartitionKeyDefinition
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Gets the partition key definition first by looking into the cache
      otherwise by reading the collection.
    syntax:
      content: function getPartitionKeyDefinition()
      parameters: []
      return:
        type:
          - >-
            Promise<@azure/cosmos.CosmosResponse<@azure/cosmos.PartitionKeyDefinition,
            @azure/cosmos.Container>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.item'
    name: item
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Used to read, replace, or delete a specific, existing <xref:Item> by id.
      Use `.items` for creating new items, or querying/reading all items.
    syntax:
      content: 'function item(id: string, partitionKey?: string)'
      parameters:
        - id: id
          type:
            - string
          description: 'The id of the <xref:Item>.'
        - id: partitionKey
          type:
            - string
          description: >-
            The partition key of the <xref:Item>. (Required for partitioned
            containers).
          optional: true
      return:
        type:
          - '@azure/cosmos.Item'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.items'
    name: items
    fullName: items
    children: []
    langs:
      - typeScript
    type: property
    summary: |
      Operations for creating new items, and reading/querying all items
      For reading, replacing, or deleting an existing item, use `.item(id)`.
    syntax:
      content: 'items: Items'
      return:
        type:
          - '@azure/cosmos.Items'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.read'
    name: read
    children: []
    type: method
    langs:
      - typeScript
    summary: Read the container's definition
    syntax:
      content: 'function read(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.replace'
    name: replace
    children: []
    type: method
    langs:
      - typeScript
    summary: Replace the container's definition
    syntax:
      content: 'function replace(body: ContainerDefinition, options?: RequestOptions)'
      parameters:
        - id: body
          type:
            - '@azure/cosmos.ContainerDefinition'
          description: ''
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.ContainerResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.storedProcedure'
    name: storedProcedure
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to read, replace, or delete a specific, existing
      <xref:StoredProcedure> by id.

      Use `.storedProcedures` for creating new stored procedures, or
      querying/reading all stored procedures.
    syntax:
      content: 'function storedProcedure(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the <xref:StoredProcedure>.
      return:
        type:
          - '@azure/cosmos.StoredProcedure'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.storedProcedures'
    name: storedProcedures
    fullName: storedProcedures
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Operations for creating new stored procedures, and reading/querying all
      stored procedures.

      For reading, replacing, or deleting an existing stored procedure, use
      `.storedProcedure(id)`.
    syntax:
      content: 'storedProcedures: StoredProcedures'
      return:
        type:
          - '@azure/cosmos.StoredProcedures'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.trigger'
    name: trigger
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to read, replace, or delete a specific, existing <xref:Trigger> by
      id.

      Use `.triggers` for creating new triggers, or querying/reading all
      triggers.
    syntax:
      content: 'function trigger(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the <xref:Trigger>.
      return:
        type:
          - '@azure/cosmos.Trigger'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.triggers'
    name: triggers
    fullName: triggers
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Operations for creating new triggers, and reading/querying all triggers.

      For reading, replacing, or deleting an existing trigger, use
      `.trigger(id)`.
    syntax:
      content: 'triggers: Triggers'
      return:
        type:
          - '@azure/cosmos.Triggers'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.userDefinedFunction'
    name: userDefinedFunction
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Used to read, replace, or delete a specific, existing
      <xref:UserDefinedFunction> by id.

      Use `.userDefinedFunctions` for creating new user defined functions, or
      querying/reading all user defined functions.
    syntax:
      content: 'function userDefinedFunction(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: |
            The id of the <xref:UserDefinedFunction>.
      return:
        type:
          - '@azure/cosmos.UserDefinedFunction'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Container.userDefinedFunctions'
    name: userDefinedFunctions
    fullName: userDefinedFunctions
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Operations for creating new user defined functions, and reading/querying
      all user defined functions.

      For reading, replacing, or deleting an existing user defined function, use
      `.userDefinedFunction(id)`.
    syntax:
      content: 'userDefinedFunctions: UserDefinedFunctions'
      return:
        type:
          - '@azure/cosmos.UserDefinedFunctions'
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.Database'
    spec.typeScript:
      - name: Database
        fullName: Database
        uid: '@azure/cosmos.Database'
  - uid: '@azure/cosmos.Items'
    spec.typeScript:
      - name: Items
        fullName: Items
        uid: '@azure/cosmos.Items'
  - uid: '@azure/cosmos.StoredProcedures'
    spec.typeScript:
      - name: StoredProcedures
        fullName: StoredProcedures
        uid: '@azure/cosmos.StoredProcedures'
  - uid: '@azure/cosmos.Triggers'
    spec.typeScript:
      - name: Triggers
        fullName: Triggers
        uid: '@azure/cosmos.Triggers'
  - uid: '@azure/cosmos.UserDefinedFunctions'
    spec.typeScript:
      - name: UserDefinedFunctions
        fullName: UserDefinedFunctions
        uid: '@azure/cosmos.UserDefinedFunctions'
  - uid: '@azure/cosmos.Conflict'
    spec.typeScript:
      - name: Conflict
        fullName: Conflict
        uid: '@azure/cosmos.Conflict'
  - uid: '@azure/cosmos.RequestOptions'
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.ContainerResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ContainerResponse
        fullName: ContainerResponse
        uid: '@azure/cosmos.ContainerResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.PartitionKeyDefinition'
    spec.typeScript:
      - name: PartitionKeyDefinition
        fullName: PartitionKeyDefinition
        uid: '@azure/cosmos.PartitionKeyDefinition'
  - uid: '@azure/cosmos.PartitionKey[]'
    spec.typeScript:
      - name: PartitionKey
        fullName: PartitionKey
        uid: '@azure/cosmos.PartitionKey'
      - name: '[]'
        fullName: '[]'
  - uid: >-
      Promise<@azure/cosmos.CosmosResponse<@azure/cosmos.PartitionKeyDefinition,
      @azure/cosmos.Container>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: CosmosResponse
        fullName: CosmosResponse
        uid: '@azure/cosmos.CosmosResponse'
      - name: <
        fullName: <
      - name: PartitionKeyDefinition
        fullName: PartitionKeyDefinition
        uid: '@azure/cosmos.PartitionKeyDefinition'
      - name: ', '
        fullName: ', '
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
      - name: '>>'
        fullName: '>>'
  - uid: '@azure/cosmos.Item'
    spec.typeScript:
      - name: Item
        fullName: Item
        uid: '@azure/cosmos.Item'
  - uid: '@azure/cosmos.ContainerDefinition'
    spec.typeScript:
      - name: ContainerDefinition
        fullName: ContainerDefinition
        uid: '@azure/cosmos.ContainerDefinition'
  - uid: '@azure/cosmos.StoredProcedure'
    spec.typeScript:
      - name: StoredProcedure
        fullName: StoredProcedure
        uid: '@azure/cosmos.StoredProcedure'
  - uid: '@azure/cosmos.Trigger'
    spec.typeScript:
      - name: Trigger
        fullName: Trigger
        uid: '@azure/cosmos.Trigger'
  - uid: '@azure/cosmos.UserDefinedFunction'
    spec.typeScript:
      - name: UserDefinedFunction
        fullName: UserDefinedFunction
        uid: '@azure/cosmos.UserDefinedFunction'
