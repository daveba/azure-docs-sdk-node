### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.Database'
    name: Database
    fullName: Database
    children:
      - '@azure/cosmos.Database.client'
      - '@azure/cosmos.Database.container'
      - '@azure/cosmos.Database.containers'
      - '@azure/cosmos.Database.constructor'
      - '@azure/cosmos.Database.delete'
      - '@azure/cosmos.Database.id'
      - '@azure/cosmos.Database.read'
      - '@azure/cosmos.Database.url'
      - '@azure/cosmos.Database.user'
      - '@azure/cosmos.Database.users'
    langs:
      - typeScript
    type: class
    summary: Operations for reading or deleting an existing database.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.client'
    name: client
    fullName: client
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'client: CosmosClient'
      return:
        type:
          - '@azure/cosmos.CosmosClient'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.container'
    name: container
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Used to read, replace, or delete a specific, existing <xref:Database> by
      id.

      Use `.containers` creating new containers, or querying/reading all
      containers.
    syntax:
      content: 'function container(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.Container'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.containers'
    name: containers
    fullName: containers
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Used for creating new containers, or querying/reading all containers.

      Use `.container(id)` to read, replace, or delete a specific, existing
      <xref:Database> by id.
    syntax:
      content: 'containers: Containers'
      return:
        type:
          - '@azure/cosmos.Containers'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.constructor'
    name: Database
    children: []
    type: constructor
    langs:
      - typeScript
    summary: >
      Returns a new <xref:Database> instance.

      Note: the intention is to get this object from <xref:CosmosClient> via
      `client.databsae(id)`, not to instaniate it yourself.
    syntax:
      content: >-
        new Database(client: CosmosClient, id: string, clientContext:
        ClientContext)
      parameters:
        - id: client
          type:
            - '@azure/cosmos.CosmosClient'
          description: ''
        - id: id
          type:
            - string
          description: ''
        - id: clientContext
          type:
            - ClientContext
          description: ''
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.delete'
    name: delete
    children: []
    type: method
    langs:
      - typeScript
    summary: Delete the given Database.
    syntax:
      content: 'function delete(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.DatabaseResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.id'
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'id: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.read'
    name: read
    children: []
    type: method
    langs:
      - typeScript
    summary: Read the definition of the given Database.
    syntax:
      content: 'function read(options?: RequestOptions)'
      parameters:
        - id: options
          type:
            - '@azure/cosmos.RequestOptions'
          description: ''
          optional: true
      return:
        type:
          - Promise<@azure/cosmos.DatabaseResponse>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.url'
    name: url
    fullName: url
    children: []
    langs:
      - typeScript
    type: property
    summary: Returns a reference URL to the resource. Used for linking in Permissions.
    syntax:
      content: 'url: string'
      return:
        type:
          - string
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.user'
    name: user
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Used to read, replace, or delete a specific, existing <xref:User> by id.
      Use `.users` for creating new users, or querying/reading all users.
    syntax:
      content: 'function user(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - '@azure/cosmos.User'
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.Database.users'
    name: users
    fullName: users
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Used for creating new users, or querying/reading all users.

      Use `.user(id)` to read, replace, or delete a specific, existing
      <xref:User> by id.
    syntax:
      content: 'users: Users'
      return:
        type:
          - '@azure/cosmos.Users'
    package: '@azure/cosmos'
references:
  - uid: '@azure/cosmos.CosmosClient'
    spec.typeScript:
      - name: CosmosClient
        fullName: CosmosClient
        uid: '@azure/cosmos.CosmosClient'
  - uid: '@azure/cosmos.Containers'
    spec.typeScript:
      - name: Containers
        fullName: Containers
        uid: '@azure/cosmos.Containers'
  - uid: '@azure/cosmos.Users'
    spec.typeScript:
      - name: Users
        fullName: Users
        uid: '@azure/cosmos.Users'
  - uid: '@azure/cosmos.Container'
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: '@azure/cosmos.Container'
  - uid: '@azure/cosmos.RequestOptions'
    spec.typeScript:
      - name: RequestOptions
        fullName: RequestOptions
        uid: '@azure/cosmos.RequestOptions'
  - uid: Promise<@azure/cosmos.DatabaseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: DatabaseResponse
        fullName: DatabaseResponse
        uid: '@azure/cosmos.DatabaseResponse'
      - name: '>'
        fullName: '>'
  - uid: '@azure/cosmos.User'
    spec.typeScript:
      - name: User
        fullName: User
        uid: '@azure/cosmos.User'
