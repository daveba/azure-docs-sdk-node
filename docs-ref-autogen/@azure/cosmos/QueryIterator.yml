### YamlMime:UniversalReference
items:
  - uid: '@azure/cosmos.QueryIterator'
    name: QueryIterator
    fullName: QueryIterator<T>
    children:
      - '@azure/cosmos.QueryIterator.current'
      - '@azure/cosmos.QueryIterator.executeNext'
      - '@azure/cosmos.QueryIterator.forEach'
      - '@azure/cosmos.QueryIterator.getAsyncIterator'
      - '@azure/cosmos.QueryIterator.hasMoreResults'
      - '@azure/cosmos.QueryIterator.nextItem'
      - '@azure/cosmos.QueryIterator.reset'
      - '@azure/cosmos.QueryIterator.toArray'
    langs:
      - typeScript
    type: class
    summary: >-
      Represents a QueryIterator Object, an implmenetation of feed or query
      response that enables

      traversal and iterating over the response

      in the Azure Cosmos DB database service.
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.current'
    name: current
    children: []
    type: method
    langs:
      - typeScript
    summary: Retrieve the current element on the QueryIterator.
    syntax:
      content: function current()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.executeNext'
    name: executeNext
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve the next batch of the feed and pass them as an array to a
      function
    syntax:
      content: function executeNext()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.forEach'
    name: forEach
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      Calls a specified callback for each item returned from the query.
      Runs serially; each callback blocks the next.
    syntax:
      content: >-
        function forEach(callback: (result: T, headers?: IHeaders, index?:
        number) => boolean | void)
      parameters:
        - id: callback
          type:
            - '(result: T, headers?: IHeaders, index?: number) => boolean | void'
          description: |
            Specified callback.
            First param is the result,
            second param (optional) is the current headers object state,
            third param (optional) is current index.
            No more callbacks will be called if one of them results false.
      return:
        type:
          - Promise<void>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.getAsyncIterator'
    name: getAsyncIterator
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      Gets an async iterator that will yield results until completion.
      NOTE: AsyncIterators are a very new feature and you might need to
      use polyfils/etc. in order to use them in your code.

      If you're using TypeScript, you can use the following polyfill as long
      as you target ES6 or higher and are running on Node 6 or higher.

      ```typescript
      if (!Symbol || !Symbol.asyncIterator) {
        (Symbol as any).asyncIterator = Symbol.for("Symbol.asyncIterator");
      }
      ```
    syntax:
      content: function getAsyncIterator()
      parameters: []
      return:
        type:
          - AsyncIterable<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.hasMoreResults'
    name: hasMoreResults
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasMoreResults()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/cosmos'
    deprecated:
      content: >-
        Instead check if nextItem() or current() returns undefined.


        Determine if there are still remaining resources to processs based on
        the value of the continuation token or the\

        elements remaining on the current batch in the QueryIterator.
  - uid: '@azure/cosmos.QueryIterator.nextItem'
    name: nextItem
    children: []
    type: method
    langs:
      - typeScript
    summary: Execute a provided function on the next element in the QueryIterator.
    syntax:
      content: function nextItem()
      parameters: []
      return:
        type:
          - Promise<@azure/cosmos.Response<T>>
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.reset'
    name: reset
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Reset the QueryIterator to the beginning and clear all the resources
      inside it
    syntax:
      content: function reset()
      parameters: []
    package: '@azure/cosmos'
  - uid: '@azure/cosmos.QueryIterator.toArray'
    name: toArray
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      Retrieve all the elements of the feed and pass them as an array to a
      function
    syntax:
      content: function toArray()
      parameters: []
      return:
        type:
          - 'Promise<@azure/cosmos.Response<T[]>>'
    package: '@azure/cosmos'
references:
  - uid: Promise<@azure/cosmos.Response<T>>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <T>>
        fullName: <T>>
  - uid: AsyncIterable<@azure/cosmos.Response<T>>
    spec.typeScript:
      - name: AsyncIterable<
        fullName: AsyncIterable<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: <T>>
        fullName: <T>>
  - uid: 'Promise<@azure/cosmos.Response<T[]>>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: Response
        fullName: Response
        uid: '@azure/cosmos.Response'
      - name: '<T[]>>'
        fullName: '<T[]>>'
